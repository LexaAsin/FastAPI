import telebot
import config
import pydantic_models
import client
import json

bot = telebot.TeleBot(config.bot_token)


@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        client.create_user({"tg_ID": message.from_user.id, "nick": message.from_user.username})
    except Exception as Ex:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ö–æ—à–µ–ª–µ–∫')
    btn2 = telebot.types.KeyboardButton('–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')
    btn3 = telebot.types.KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è')
    markup.add(btn1, btn2, btn3)

    text = f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, —è —Ç–≤–æ–π –±–æ—Ç-–∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫, \n—É –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(regexp='–ö–æ—à–µ–ª–µ–∫')
def wallet(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = client.get_user_by_tg_id(message.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫
        wallet = client.get_user_wallet_by_tg_id(message.from_user.id)

        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
        markup.add(btn1)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(wallet, dict):
            balance = wallet.get("balance")
            if balance is None:
                balance_text = "0.0"
            else:
                balance_btc = balance / 100000000
                balance_text = f"{balance_btc}"

            address = wallet.get("address", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

            text = f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance_text} BTC\n' \
                   f'üìç –í–∞—à –∞–¥—Ä–µ—Å: {address}'
        else:
            text = f'‚ùå –û—à–∏–±–∫–∞: {wallet}'

        bot.send_message(message.chat.id, text, reply_markup=markup)

    except Exception as e:
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
        markup.add(btn1)
        text = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: {str(e)}'
        bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(regexp='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')
def start_transaction(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
    markup.add(btn1)
    text = f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: '
    bot.send_message(message.chat.id, text, reply_markup=markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in states_of_users:
        states_of_users[message.from_user.id] = {}
    states_of_users[message.from_user.id]["STATE"] = "ADDRESS"


@bot.message_handler(regexp='–ò—Å—Ç–æ—Ä–∏—è')
def history(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
    markup.add(btn1)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = client.get_user_by_tg_id(message.from_user.id)
        if isinstance(user_data, dict) and 'id' in user_data:
            transactions = client.get_user_transactions(user_data['id'])
            text = f'–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: \n{transactions}'
        else:
            text = f'–û—à–∏–±–∫–∞: {user_data}'
    except Exception as e:
        text = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}'

    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(regexp='–ú–µ–Ω—é')
def menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ö–æ—à–µ–ª–µ–∫')
    btn2 = telebot.types.KeyboardButton('–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')
    btn3 = telebot.types.KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è')
    markup.add(btn1, btn2, btn3)
    text = f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['update'])
def update_balance(message):
    """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = client.get_user_by_tg_id(message.from_user.id)
        if isinstance(user_data, dict) and 'id' in user_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API
            balance = client.get_user_balance_by_id(user_data['id'])

            markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
            markup.add(btn1)

            if isinstance(balance, (int, float)):
                balance_btc = balance / 100000000
                text = f'‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {balance_btc} BTC'
            else:
                text = f'‚ÑπÔ∏è {balance}'
        else:
            text = f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}'

        bot.send_message(message.chat.id, text, reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞: {e}')


@bot.message_handler(regexp='–Ø –≤ –∫–æ–Ω—Å–æ–ª–∏')
def print_me(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
    markup.add(btn1)
    print(message.from_user.to_dict())
    text = f'–¢—ã: {message.from_user.to_dict()}'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(func=lambda message: message.from_user.id == config.tg_admin_id and message.text == "–ê–¥–º–∏–Ω–∫–∞")
def admin_panel(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å')
    btn2 = telebot.types.KeyboardButton('–í—Å–µ —é–∑–µ—Ä—ã')
    btn3 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
    markup.add(btn1, btn2, btn3)
    text = f'–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
    bot.send_message(message.chat.id, text, reply_markup=markup)


# ============ –ü–ê–ì–ò–ù–ê–¶–ò–Ø ============

@bot.message_handler(func=lambda message: message.from_user.id == config.tg_admin_id and message.text == "–í—Å–µ —é–∑–µ—Ä—ã")
def all_users(message):
    show_users_page(message, 1)


def show_users_page(message, page):
    users = client.get_users()
    if not isinstance(users, list):
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {users}")
        return

    users_per_page = 4
    start_index = (page - 1) * users_per_page
    end_index = start_index + users_per_page

    total_pages = (len(users) + users_per_page - 1) // users_per_page

    inline_markup = telebot.types.InlineKeyboardMarkup()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for user in users[start_index:end_index]:
        inline_markup.add(telebot.types.InlineKeyboardButton(
            text=f'–Æ–∑–µ—Ä: {user["tg_ID"]}',
            callback_data=f"user_{user["tg_ID"]}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []

    if page > 1:
        pagination_buttons.append(telebot.types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"page_{page - 1}"
        ))

    pagination_buttons.append(telebot.types.InlineKeyboardButton(
        text=f"{page}/{total_pages}",
        callback_data="current"
    ))

    if page < total_pages:
        pagination_buttons.append(telebot.types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"page_{page + 1}"
        ))

    if pagination_buttons:
        inline_markup.add(*pagination_buttons)

    text = f'–Æ–∑–µ—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):'
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


def show_users_page_edit(call, page):
    users = client.get_users()
    if not isinstance(users, list):
        bot.edit_message_text(f"–û—à–∏–±–∫–∞: {users}", call.message.chat.id, call.message.message_id)
        return

    users_per_page = 4
    start_index = (page - 1) * users_per_page
    end_index = start_index + users_per_page

    total_pages = (len(users) + users_per_page - 1) // users_per_page

    inline_markup = telebot.types.InlineKeyboardMarkup()

    for user in users[start_index:end_index]:
        inline_markup.add(telebot.types.InlineKeyboardButton(
            text=f'–Æ–∑–µ—Ä: {user["tg_ID"]}',
            callback_data=f"user_{user["tg_ID"]}"
        ))

    pagination_buttons = []

    if page > 1:
        pagination_buttons.append(telebot.types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"page_{page - 1}"
        ))

    pagination_buttons.append(telebot.types.InlineKeyboardButton(
        text=f"{page}/{total_pages}",
        callback_data="current"
    ))

    if page < total_pages:
        pagination_buttons.append(telebot.types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"page_{page + 1}"
        ))

    if pagination_buttons:
        inline_markup.add(*pagination_buttons)

    text = f'–Æ–∑–µ—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):'
    bot.edit_message_text(
        text=text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=inline_markup
    )


# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–õ–ë–≠–ö–û–í ============

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    query_type = call.data.split('_')[0]

    if query_type == 'page':
        page = int(call.data.split('_')[1])
        show_users_page_edit(call, page)

    elif query_type == 'user':
        user_id = call.data.split('_')[1]
        users = client.get_users()
        if isinstance(users, list):
            inline_markup = telebot.types.InlineKeyboardMarkup()
            for user in users:
                if str(user['tg_ID']) == user_id:
                    inline_markup.add(
                        telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='users'),
                        telebot.types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞", callback_data=f'delete_user_{user_id}')
                    )

                    balance = client.get_user_balance_by_id(user['id'])
                    balance_text = balance if isinstance(balance, (int, float)) else "–û—à–∏–±–∫–∞"

                    bot.edit_message_text(
                        text=f'–î–∞–Ω–Ω—ã–µ –ø–æ —é–∑–µ—Ä—É:\n'
                             f'ID: {user["tg_ID"]}\n'
                             f'–ù–∏–∫: {user.get("nick", "–ù–µ—Ç –Ω–∏–∫–∞")}\n'
                             f'–ë–∞–ª–∞–Ω—Å: {balance_text}',
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        reply_markup=inline_markup
                    )
                    break

    elif query_type == 'users':
        show_users_page_edit(call, 1)

    elif query_type == 'delete' and call.data.split('_')[1] == 'user':
        user_id = int(call.data.split('_')[2])
        users = client.get_users()
        if isinstance(users, list):
            for user in users:
                if user['tg_ID'] == user_id:
                    client.delete_user(user['id'])
                    show_users_page_edit(call, 1)
                    break


@bot.message_handler(func=lambda message: message.from_user.id == config.tg_admin_id and message.text == "–û–±—â–∏–π –±–∞–ª–∞–Ω—Å")
def total_balance(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
    btn2 = telebot.types.KeyboardButton('–ê–¥–º–∏–Ω–∫–∞')
    markup.add(btn1, btn2)

    try:
        balance = client.get_total_balance()
        if isinstance(balance, (int, float)):
            balance_btc = balance / 100000000
            text = f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance_btc} BTC'
        else:
            text = f'–û—à–∏–±–∫–∞: {balance}'
    except Exception as e:
        text = f'–û—à–∏–±–∫–∞: {e}'

    bot.send_message(message.chat.id, text, reply_markup=markup)


# ============ –°–ò–°–¢–ï–ú–ê –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ============

states_of_users = {}


@bot.message_handler(
    func=lambda message: message.from_user.id in states_of_users and states_of_users[message.from_user.id].get(
        "STATE") == 'ADDRESS')
def get_amount_of_transaction(message):
    if message.text == "–ú–µ–Ω—é":
        if message.from_user.id in states_of_users:
            del states_of_users[message.from_user.id]
        menu(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')
    markup.add(btn1)
    text = f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Å–∞—Ç–æ—à–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: '
    bot.send_message(message.chat.id, text, reply_markup=markup)

    states_of_users[message.from_user.id]["STATE"] = "AMOUNT"
    states_of_users[message.from_user.id]["ADDRESS"] = message.text


@bot.message_handler(
    func=lambda message: message.from_user.id in states_of_users and states_of_users[message.from_user.id].get(
        "STATE") == 'AMOUNT')
def get_confirmation_of_transaction(message):
    if message.text == "–ú–µ–Ω—é":
        if message.from_user.id in states_of_users:
            del states_of_users[message.from_user.id]
        menu(message)
        return

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–ú–µ–Ω—é')

    if message.text.isdigit():
        text = f'–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {message.text} —Å–∞—Ç–æ—à–∏,\n–Ω–∞ –±–∏—Ç–∫–æ–∏–Ω-–∞–¥—Ä–µ—Å {states_of_users[message.from_user.id]["ADDRESS"]}'
        confirm = telebot.types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é')
        markup.add(confirm)
        bot.send_message(message.chat.id, text, reply_markup=markup)

        states_of_users[message.from_user.id]["STATE"] = "CONFIRM"
        states_of_users[message.from_user.id]["AMOUNT"] = int(message.text)
    else:
        text = f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ: '
        bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(
    func=lambda message: message.from_user.id in states_of_users and states_of_users[message.from_user.id].get(
        "STATE") == 'CONFIRM')
def get_hash_of_transaction(message):
    if message.text == "–ú–µ–Ω—é":
        if message.from_user.id in states_of_users:
            del states_of_users[message.from_user.id]
        menu(message)
    elif message.text == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        try:
            result = client.create_transaction(
                message.from_user.id,
                states_of_users[message.from_user.id]['ADDRESS'],
                states_of_users[message.from_user.id]['AMOUNT']
            )
            bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

        if message.from_user.id in states_of_users:
            del states_of_users[message.from_user.id]
        menu(message)


bot.infinity_polling() #- –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
# –¢–µ—Ä–º–∏–Ω–∞–ª 1 - –°–µ—Ä–≤–µ—Ä:
#
# uvicorn app:api --reload
# –¢–µ—Ä–º–∏–Ω–∞–ª 2 - –ë–æ—Ç:
#
# python tg_bot.py





# Threading –∫–æ–¥ - –ù–ï –ó–ê–†–ê–ë–û–¢–ê–õ(((
# import threading
#
# def run_bot():
#     bot.infinity_polling()
#
# if __name__ == "__main__":
#     bot_thread = threading.Thread(target=run_bot)
#     bot_thread.daemon = True
#     bot_thread.start()
#
#     import uvicorn
#     uvicorn.run("app:api", host="127.0.0.1", port=8000, reload=True) #  uvicorn app:api --reload –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç